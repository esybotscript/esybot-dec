#!/usr/bin/env python3
# esybot_simple.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å–æ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä

import asyncio
import sys
import re
import datetime
from typing import Dict, Any
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage

class SimpleBotAdvanced:
    def __init__(self):
        self.config = {}
        self.variables = {}
        self.python_globals = {}
        
    def load(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Python –±–ª–æ–∫–æ–≤"""
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º Python –±–ª–æ–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        content = self._parse_python_blocks(content)
        
        lines = content.split('\n')
        current_section = None
        
        for line in lines:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
                
            if line.startswith('[') and line.endswith(']'):
                current_section = line[1:-1]
                if current_section not in self.config:
                    self.config[current_section] = {}
            elif '=' in line and current_section:
                key, value = line.split('=', 1)
                self.config[current_section][key.strip()] = value.strip()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if 'VARS' in self.config:
            for key, value in self.config['VARS'].items():
                self.variables[key] = self._parse_value(value)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–æ—Ç: {self.config.get('BOT', {}).get('name', 'Simple Bot')}")
        print(f"üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(self.variables)}")
        print(f"üêç Python –±–ª–æ–∫–æ–≤: {sum(1 for section in self.config.values() if isinstance(section, dict) and 'python' in section)}")
        
    def _parse_python_blocks(self, content):
        """–ü–∞—Ä—Å–∏–Ω–≥ Python –±–ª–æ–∫–æ–≤ —Å —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏"""
        def replace_python_block(match):
            python_code = match.group(1)
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
            lines = python_code.strip().split('\n')
            cleaned_lines = []
            for line in lines:
                cleaned_lines.append(line.strip())
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ python = –∫–æ–¥ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Å–µ—Ä–æ–º)
            return f"python = {repr('\\n'.join(cleaned_lines))}"
        
        # –ò—â–µ–º –±–ª–æ–∫–∏ –≤–∏–¥–∞ python { ... }
        pattern = r'python\s*\{([^}]*)\}'
        content = re.sub(pattern, replace_python_block, content, flags=re.DOTALL)
        
        return content
    
    def _parse_value(self, value):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–æ–≤"""
        value = value.strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ Python –∫–æ–¥–∞ (–≤ –∫–∞–≤—ã—á–∫–∞—Ö –ø–æ—Å–ª–µ python =)
        if value.startswith("'") and value.endswith("'"):
            return value[1:-1].replace('\\n', '\n')
        if value.startswith('"') and value.endswith('"'):
            return value[1:-1].replace('\\n', '\n')
        
        # –ë—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
        if value.lower() == 'true':
            return True
        if value.lower() == 'false':
            return False
            
        # –ß–∏—Å–ª–∞
        try:
            if '.' in value:
                return float(value)
            else:
                return int(value)
        except ValueError:
            pass
            
        return value
    
    def replace_variables(self, text, context={}):
        """–ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ"""
        if not text:
            return text
            
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        now = datetime.datetime.now()
        system_vars = {
            'user_id': context.get('user_id', 0),
            'chat_id': context.get('chat_id', 0),
            'first_name': context.get('first_name', ''),
            'username': context.get('username', ''),
            'text': context.get('text', ''),
            'date': now.strftime('%Y-%m-%d'),
            'time': now.strftime('%H:%M:%S'),
            'datetime': now.strftime('%Y-%m-%d %H:%M:%S'),
        }
        
        # –ó–∞–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for var_name, var_value in self.variables.items():
            text = text.replace(f'${{{var_name}}}', str(var_value))
            text = text.replace(f'${var_name}', str(var_value))
        
        # –ó–∞–º–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for var_name, var_value in system_vars.items():
            text = text.replace(f'${{{var_name}}}', str(var_value))
            text = text.replace(f'${var_name}', str(var_value))
            
        # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ Python –±–ª–æ–∫–æ–≤
        for var_name, var_value in self.python_globals.items():
            if not var_name.startswith('_'):
                text = text.replace(f'${{{var_name}}}', str(var_value))
                text = text.replace(f'${var_name}', str(var_value))
        
        return text
    
    def execute_python(self, code, context={}):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        if not code:
            return
            
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            local_vars = {
                **self.variables,
                **context,
                **self.python_globals,
                'print': print  # –†–∞–∑—Ä–µ—à–∞–µ–º print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }
            
            print(f"üêç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è Python –∫–æ–¥:")
            for i, line in enumerate(code.split('\n'), 1):
                if line.strip():
                    print(f"   {i}: {line}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            exec(code, {"__builtins__": __builtins__}, local_vars)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            for key, value in local_vars.items():
                if key in self.variables:
                    self.variables[key] = value
                elif not key.startswith('_') and key not in context and key != 'print':
                    self.python_globals[key] = value
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key} = {value}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python: {e}")
            import traceback
            traceback.print_exc()
    
    def check_condition(self, condition, context={}):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π"""
        if not condition:
            return True
            
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —É—Å–ª–æ–≤–∏–∏
        condition = self.replace_variables(condition, context)
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ Python –±–ª–æ–∫–æ–≤
            eval_context = {**self.python_globals}
            result = eval(condition, {"__builtins__": {}}, eval_context)
            print(f"üîç –£—Å–ª–æ–≤–∏–µ '{condition}' = {result}")
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É—Å–ª–æ–≤–∏–∏ '{condition}': {e}")
            return False
    
    def create_keyboard(self, section, context={}):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–µ–∫—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ê –û–®–ò–ë–ö–ê"""
        builder = InlineKeyboardBuilder()
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
        button_count = 0
        
        for key, value in section.items():
            if key.startswith('button'):
                # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–Ω–æ–ø–∫–∞—Ö
                value = self.replace_variables(value, context)
                
                parts = value.split('|')
                if len(parts) == 2:
                    text, callback = parts[0].strip(), parts[1].strip()
                    builder.button(text=text, callback_data=callback)
                    button_count += 1
                elif len(parts) == 1:
                    text = parts[0].strip()
                    builder.button(text=text, callback_data=f"btn_{key}")
                    button_count += 1
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º button_count –≤–º–µ—Å—Ç–æ len(builder.buttons)
        return builder.as_markup() if button_count > 0 else None
    
    def process_effects(self, section, context={}):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–µ–∫—Ü–∏–∏"""
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ª–æ–≤–∏–π
        if 'python' in section:
            self.execute_python(section['python'], context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π (—Ç–µ–ø–µ—Ä—å —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ Python)
        if 'if' in section:
            if not self.check_condition(section['if'], context):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ else –≤–µ—Ç–∫–∏
                if 'else_text' in section:
                    return {
                        'text': self.replace_variables(section['else_text'], context),
                        'keyboard': self.create_else_keyboard(section, context),
                        'reply': section.get('else_reply', 'OK')
                    }
                return None
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if 'inc' in section:
            var_name = section['inc']
            if var_name in self.variables:
                self.variables[var_name] += 1
            else:
                self.variables[var_name] = 1
            print(f"üìà –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var_name} = {self.variables[var_name]}")
        
        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if 'dec' in section:
            var_name = section['dec']
            if var_name in self.variables:
                self.variables[var_name] -= 1
            else:
                self.variables[var_name] = -1
            print(f"üìâ –£–º–µ–Ω—å—à–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var_name} = {self.variables[var_name]}")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if 'set' in section:
            parts = section['set'].split('=', 1)
            if len(parts) == 2:
                var_name, var_value = parts[0].strip(), parts[1].strip()
                self.variables[var_name] = self._parse_value(self.replace_variables(var_value, context))
                print(f"üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var_name} = {self.variables[var_name]}")
        
        return {
            'text': self.replace_variables(section.get('text', ''), context),
            'keyboard': self.create_keyboard(section, context),
            'reply': self.replace_variables(section.get('reply', 'OK'), context)
        }
    
    def create_else_keyboard(self, section, context={}):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è else –≤–µ—Ç–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ê –û–®–ò–ë–ö–ê"""
        builder = InlineKeyboardBuilder()
        button_count = 0
        
        for key, value in section.items():
            if key.startswith('else_button'):
                value = self.replace_variables(value, context)
                parts = value.split('|')
                if len(parts) == 2:
                    text, callback = parts[0].strip(), parts[1].strip()
                    builder.button(text=text, callback_data=callback)
                    button_count += 1
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º button_count –≤–º–µ—Å—Ç–æ len(builder.buttons)
        return builder.as_markup() if button_count > 0 else None
        
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        bot = Bot(self.config['BOT']['token'])
        dp = Dispatcher(storage=MemoryStorage())
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
        def get_context(update):
            if hasattr(update, 'from_user') and update.from_user:
                return {
                    'user_id': update.from_user.id,
                    'chat_id': update.chat.id if hasattr(update, 'chat') and update.chat else update.from_user.id,
                    'first_name': update.from_user.first_name or '',
                    'username': f"@{update.from_user.username}" if update.from_user.username else '',
                    'text': getattr(update, 'text', '') or ''
                }
            return {}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
        @dp.message(Command("start"))
        async def start_handler(message: Message):
            if 'START' not in self.config:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ /start –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return
                
            context = get_context(message)
            result = self.process_effects(self.config['START'], context)
            
            if result:
                await message.answer(result['text'], reply_markup=result['keyboard'])
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        for section_name, section_config in self.config.items():
            if section_name not in ['BOT', 'VARS', 'START', 'MESSAGE', 'PHOTO', 'DOCUMENT', 'VOICE']:
                @dp.callback_query(F.data == section_name)
                async def callback_handler(query: CallbackQuery, section=section_config):
                    context = get_context(query)
                    result = self.process_effects(section, context)
                    
                    if result and result['text']:
                        await query.message.edit_text(result['text'], reply_markup=result['keyboard'])
                        await query.answer(result['reply'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        if 'PHOTO' in self.config:
            @dp.message(F.content_type == ContentType.PHOTO)
            async def photo_handler(message: Message):
                context = get_context(message)
                result = self.process_effects(self.config['PHOTO'], context)
                if result:
                    await message.answer(result['text'], reply_markup=result['keyboard'])
        
        if 'DOCUMENT' in self.config:
            @dp.message(F.content_type == ContentType.DOCUMENT)
            async def document_handler(message: Message):
                context = get_context(message)
                result = self.process_effects(self.config['DOCUMENT'], context)
                if result:
                    await message.answer(result['text'], reply_markup=result['keyboard'])
        
        if 'VOICE' in self.config:
            @dp.message(F.content_type == ContentType.VOICE)
            async def voice_handler(message: Message):
                context = get_context(message)
                result = self.process_effects(self.config['VOICE'], context)
                if result:
                    await message.answer(result['text'], reply_markup=result['keyboard'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'MESSAGE' in self.config:
            @dp.message(F.text)
            async def message_handler(message: Message):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if message.text.startswith('/'):
                    return
                    
                context = get_context(message)
                context['text'] = message.text
                result = self.process_effects(self.config['MESSAGE'], context)
                if result:
                    await message.answer(result['text'], reply_markup=result['keyboard'])
        
        print(f"üöÄ {self.config.get('BOT', {}).get('name', 'Simple Bot')} –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)

def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python esybot_simple.py bot.simple")
        return
        
    bot = SimpleBotAdvanced()
    bot.load(sys.argv[1])
    asyncio.run(bot.run())

if __name__ == "__main__":
    main()
